{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","id","aria-current","type","role","aria-checked","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","_slicedToArray","text","setText","Fragment","style","color","heading","onChange","event","target","value","backgroundColor","rows","showAlert","newText","toLowerCase","toUpperCase","split","length","Alert","alert","word","lower","charAt","slice","Capitalize","msg","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","changeMode","colour","document","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.8b45bb60.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} >\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    \r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"#\">About</a>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode === 'dark'?'light':'dark'}`}>\r\n        \r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" aria-checked=\"true\"    onClick={props.toggleMode} id=\"flexSwitchCheckDisabled\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDisabled\">dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string\r\n\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'hello'\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const changetoUpper = () => {\r\n    // console.log(\"Uppercase is clicked on\" + text)\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"change to Uppercase\", \"success\");\r\n  };\r\n  const changetoLower = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"change to lowercase\", \"success\");\r\n  };\r\n  const Clear = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text has been cleared\", \"success\");\r\n  };\r\n  \r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n    \r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  // let myStyle={\r\n  //   color: 'white',\r\n  //   backgroundColor : 'black',\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\" >\r\n        <div className=\"my-3\" style={{color: props.mode === 'light' ?'black':'white'}} >\r\n          <label htmlFor=\"mybox\" className=\"form-label\">\r\n            <h2>{props.heading}</h2>\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            onChange={handleOnChange}\r\n            value={text}\r\n            id=\"mybox\"\r\n            style={{backgroundColor: props.mode === 'light' ?'white':'grey' ,color: props.mode === 'light' ?'black':'white'}}\r\n\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary \" onClick={Clear}>\r\n          Clear\r\n        </button>\r\n        <button className=\"btn btn-primary mx-3\" onClick={changetoLower}>\r\n          Convert to lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-0\" onClick={changetoUpper}>\r\n          Convert to uppercase\r\n        </button>\r\n        \r\n       </div>\r\n       <div className=\"container my-3\" style={{color: props.mode === 'light' ?'black':'white'}} >\r\n        <h1>Your Text Summary</h1>\r\n        <p>\r\n          {text.split(\" \").length - 1} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * (text.split(\" \").length - 1)} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const Capitalize = (word) => {\r\n        const lower =word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{Capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n  )\r\n}\r\n// <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>       will show a X(close) button to cloae the nav bar \r\n","\n\nimport React , { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport Alert from './components/Alert';\nimport About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n  \n// } from \"react-router-dom\";\n\n\nfunction App() {\nconst [mode, setMode] = useState('light');\n\nconst [alert, setAlert] = useState(null);\n\nconst showAlert = (message,type)=>{\nsetAlert({\n  msg: message,\n  type: type\n})\nsetTimeout (()=>{\n  setAlert(null);\n}, 1500);\n\n}\nconst changeMode = ( colour ) => {\n document.body.style.backgroundColor = colour\n  \n}\nconst toggleMode = () => { \n  if(mode === 'light'){\n setMode ('dark');\n changeMode('#10477e')\n    showAlert(\"New mode has been enabled!!!!\", \"success\");\n    document.title= \"textUtil-dark\"  \n  }\n  else{\n  setMode ('light');\n  document.body.style.backgroundColor = 'white'\n  showAlert(\"Light mode has been enabled!!!!\", \"success\");\n\n  }\n}\n  return (\n  <>\n   {/* <Router> */}\n<Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} /> \n<Alert alert={alert}/>\n<div className=\"container my-3\">\n{/* <Routes>\n          <Route exact path=\"/about\" element={<About/>}>\n            \n            \n          </Route> */}\n          \n          {/* <Route exact path=\"/home\" element= */}\n          <Textform showAlert={showAlert} heading=\"Enter your text here\" mode={mode} changeMode={changeMode}/>\n           \n            \n          {/* </Route>\n        </Routes>\n        \n        </Router> */}\n{/* <About/> */}\n   \n</div>\n </>\n  );\n}\n\nexport default App;\n   ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}